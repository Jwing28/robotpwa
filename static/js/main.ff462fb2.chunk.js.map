{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["SearchBox","onChange","className","type","placeholder","Card","email","id","name","alt","src","CardList","robots","map","robot","key","Scroll","children","style","overflowY","border","height","connect","state","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","search","payload","onRequestRobots","a","fetch","data","json","e","props","useEffect","filteredRobots","filter","toLocaleLowerCase","includes","toLowerCase","target","value","length","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","combineReducers","action","Object","assign","logger","createLogger","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff462fb2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBox = ({ onChange }) => {\n  return (\n    <input\n      className=\"\"\n      onChange={onChange}\n      type=\"search\"\n      placeholder=\"search robots\"\n    />\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Card = ({ email, id, name }) => (\n  <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n    <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) =>\n  robots.map(robot => <Card key={robot.id} {...robot} />);\n\nexport default CardList;\n","import React from \"react\";\nimport \"./Scroll.css\";\n\nconst Scroll = ({ children }) => (\n  <div\n    style={{\n      overflowY: \"scroll\",\n      border: \"5px solid black\",\n      height: \"800px\"\n    }}\n  >\n    {children}\n  </div>\n);\n\nexport default Scroll;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport SearchBox from \"../components/SearchBox\";\nimport { robots } from \"../robots\";\nimport CardList from \"../components/CardList\";\nimport { setSearchField } from \"../redux/actions\";\nimport Scroll from \"../components/Scroll\";\nimport { requestRobots } from \"../redux/actions\";\n\nimport \"./App.css\";\n\nconst App = props => {\n  const {\n    isPending,\n    onRequestRobots,\n    onSearchChange,\n    robots,\n    searchField\n  } = props;\n\n  const onChange = e => {\n    onSearchChange(e.target.value);\n  };\n\n  useEffect(() => {\n    onRequestRobots();\n  }, []);\n\n  const filteredRobots = robots.filter(robot => {\n    const normalizedName = robot.name.toLocaleLowerCase();\n    return normalizedName.includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"App tc\">\n      {isPending ? (\n        <h1>Loading...</h1>\n      ) : (\n        <>\n          <h1 className=\"title f2\">Robo Friends</h1>\n          <SearchBox onChange={onChange} />\n          <div className=\"spacer\"></div>\n          <Scroll>\n            {!!props.robots.length && <CardList robots={filteredRobots} />}\n          </Scroll>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\n// onRequestRobots - requestRobots function requires being passed dispatch\n// so we can kick off our async request\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: search => dispatch(setSearchField(search)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n// async action creator (by having thunks)\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  try {\n    (async () => {\n      const data = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const json = await data.json();\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: json });\n    })();\n  } catch (e) {\n    dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: e });\n  }\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\n// promise - 3 possible states\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILURE = \"REQUEST_ROBOTS_FAILURE\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILURE:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  requestRobots,\n  searchRobots\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./redux/reducers\";\n\nimport \"./index.css\";\n\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}